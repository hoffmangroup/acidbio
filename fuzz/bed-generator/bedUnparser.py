# Generated by Grammarinator 19.3

from itertools import chain
from grammarinator.runtime import *

import bedUnlexer


class bedUnparser(Grammarinator):

    def __init__(self, unlexer):
        super(bedUnparser, self).__init__()
        self.unlexer = unlexer

    @depthcontrol
    def line(self):
        current = self.create_node(UnparserRule(name='line'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.chrom()
                current += self.unlexer.SEPARATOR()
                current += self.coordinate()
                current += self.unlexer.SEPARATOR()
                current += self.name()
                current += self.create_node(UnlexerRule(src='\n'))

        return current
    line.min_depth = 3

    @depthcontrol
    def chrom(self):
        current = self.create_node(UnparserRule(name='chrom'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.unlexer.CHAR()

        return current
    chrom.min_depth = 1

    @depthcontrol
    def coordinate(self):
        current = self.create_node(UnparserRule(name='coordinate'))
        current += self.unlexer.NUMBER()
        current += self.unlexer.SEPARATOR()
        current += self.unlexer.NUMBER()
        return current
    coordinate.min_depth = 2

    @depthcontrol
    def name(self):
        current = self.create_node(UnparserRule(name='name'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.unlexer.CHAR()

        return current
    name.min_depth = 1

    @depthcontrol
    def score(self):
        current = self.create_node(UnparserRule(name='score'))
        choice = self.choice([0 if [1, 1, 1, 0, 1][i] > self.unlexer.max_depth else w *
                              self.unlexer.weights.get(('alt_21', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_21', choice)] = self.unlexer.weights.get(
            ('alt_21', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.NUM()
        elif choice == 1:
            current += self.unlexer.NUM()
            current += self.unlexer.NUM()
        elif choice == 2:
            current += self.unlexer.NUM()
            current += self.unlexer.NUM()
            current += self.unlexer.NUM()
        elif choice == 3:
            current += self.create_node(UnlexerRule(src='1000'))
        elif choice == 4:
            current += self.unlexer.NUM()
            current += self.create_node(UnlexerRule(src='.'))
            if self.unlexer.max_depth >= 0:
                for _ in self.one_or_more():
                    current += self.unlexer.NUM()

        return current
    score.min_depth = 0

    @depthcontrol
    def strand(self):
        current = self.create_node(UnparserRule(name='strand'))
        choice = self.choice([0 if [0, 0, 0][i] > self.unlexer.max_depth else w *
                              self.unlexer.weights.get(('alt_29', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_29', choice)] = self.unlexer.weights.get(
            ('alt_29', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='+'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='-'))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='.'))
        return current
    strand.min_depth = 0

    @depthcontrol
    def thickStart(self):
        current = self.create_node(UnparserRule(name='thickStart'))
        current += self.unlexer.NUMBER()
        return current
    thickStart.min_depth = 2

    @depthcontrol
    def thickEnd(self):
        current = self.create_node(UnparserRule(name='thickEnd'))
        current += self.unlexer.NUMBER()
        return current
    thickEnd.min_depth = 2

    @depthcontrol
    def itemRgb(self):
        current = self.create_node(UnparserRule(name='itemRgb'))
        current += self.unlexer.NUM255()
        current += self.create_node(UnlexerRule(src=','))
        current += self.unlexer.NUM255()
        current += self.create_node(UnlexerRule(src=','))
        current += self.unlexer.NUM255()
        return current
    itemRgb.min_depth = 1

    @depthcontrol
    def blockCount(self):
        current = self.create_node(UnparserRule(name='blockCount'))
        current += self.unlexer.NUM()
        return current
    blockCount.min_depth = 1

    @depthcontrol
    def blockSizes(self):
        current = self.create_node(UnparserRule(name='blockSizes'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.unlexer.NUMBER()
                current += self.create_node(UnlexerRule(src=','))

        return current
    blockSizes.min_depth = 2

    @depthcontrol
    def blockStarts(self):
        current = self.create_node(UnparserRule(name='blockStarts'))
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_more():
                current += self.unlexer.NUMBER()
                current += self.create_node(UnlexerRule(src=','))

        current += self.unlexer.NUMBER()
        return current
    blockStarts.min_depth = 2

    @depthcontrol
    def chromName(self):
        current = self.create_node(UnparserRule(name='chromName'))
        current += self.create_node(UnlexerRule(src='chr'))
        choice = self.choice([0 if [1, 0, 0, 0][i] > self.unlexer.max_depth else w *
                              self.unlexer.weights.get(('alt_42', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_42', choice)] = self.unlexer.weights.get(
            ('alt_42', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            choice = self.choice([0 if [1, 1, 1][i] > self.unlexer.max_depth else w *
                                  self.unlexer.weights.get(('alt_47', i), 1) for i, w in enumerate([1, 1, 1])])
            self.unlexer.weights[('alt_47', choice)] = self.unlexer.weights.get(
                ('alt_47', choice), 1) * self.unlexer.cooldown
            if choice == 0:
                current += self.unlexer.NUM()
            elif choice == 1:
                current += self.create_node(UnlexerRule(src='1'))
                current += self.unlexer.NUM()
            elif choice == 2:
                current += self.create_node(UnlexerRule(src='2'))
                current += self.unlexer.NUM3()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='X'))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='Y'))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src='M'))
        return current
    chromName.min_depth = 0

    default_rule = line
